{"ast":null,"code":"import { combineReducers } from 'redux';\nimport _posts from '../data/data'; // here the postReducer is for managing the state of posts,now we have to manage the reducer for commentsit will be done below\n\nfunction posts(state = _posts, action) {\n  console.log(action.type);\n\n  switch (action.type) {\n    case 'REMOVE_POST':\n      return [...state.slice(0, action.index), ...state.slice(action.index + 1)];\n\n    case 'ADD_POST':\n      return [...state, action.post];\n\n    case 'LOAD_POSTS':\n      return action.posts;\n\n    default:\n      return state;\n  }\n} // reducer for comments\n\n\nfunction comments(state = {}, action) {\n  switch (action.type) {\n    case 'ADD_COMMENT':\n      // this if works if comments state is undefined that means if no comment is been typed it will be placed\n      if (!state[action.postId]) {\n        return { ...state,\n          [action.postId]: [action.comment]\n        };\n      } else {\n        return { ...state,\n          [action.postId]: [...state[action.postId], action.comment]\n        };\n      }\n\n    default:\n      return state;\n  }\n\n  return state;\n} // when we have more than one reducer in RootReducer, we should combine those reducers and assign it to the  rootReducer and place it in store\n\n\nconst rootReducer = combineReducers({\n  posts,\n  comments\n}); // here ...state is a spread operator which means every single element in a state\n\nexport default rootReducer;","map":{"version":3,"sources":["E:/code/Project/PhotoWall/my-app/src/redux/reducer.js"],"names":["combineReducers","_posts","posts","state","action","console","log","type","slice","index","post","comments","postId","comment","rootReducer"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;;AACA,SAASC,KAAT,CAAeC,KAAK,GAAGF,MAAvB,EAA+BG,MAA/B,EAAuC;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;;AAEA,UAAQH,MAAM,CAACG,IAAf;AACI,SAAK,aAAL;AAAoB,aAAO,CAAC,GAAGJ,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeJ,MAAM,CAACK,KAAtB,CAAJ,EAAkC,GAAGN,KAAK,CAACK,KAAN,CAAYJ,MAAM,CAACK,KAAP,GAAe,CAA3B,CAArC,CAAP;;AAEpB,SAAK,UAAL;AAAiB,aAAO,CAAC,GAAGN,KAAJ,EAAWC,MAAM,CAACM,IAAlB,CAAP;;AAEjB,SAAK,YAAL;AAAmB,aAAON,MAAM,CAACF,KAAd;;AAEnB;AAAS,aAAOC,KAAP;AAPb;AASH,C,CACD;;;AACA,SAASQ,QAAT,CAAkBR,KAAK,GAAG,EAA1B,EAA8BC,MAA9B,EAAsC;AAClC,UAAQA,MAAM,CAACG,IAAf;AACI,SAAK,aAAL;AACI;AACA,UAAG,CAACJ,KAAK,CAACC,MAAM,CAACQ,MAAR,CAAT,EAA0B;AACtB,eAAO,EAAE,GAAGT,KAAL;AAAY,WAACC,MAAM,CAACQ,MAAR,GAAgB,CAACR,MAAM,CAACS,OAAR;AAA5B,SAAP;AACH,OAFD,MAEO;AACH,eAAO,EAAE,GAAGV,KAAL;AAAY,WAACC,MAAM,CAACQ,MAAR,GAAiB,CAAC,GAAGT,KAAK,CAACC,MAAM,CAACQ,MAAR,CAAT,EAA0BR,MAAM,CAACS,OAAjC;AAA7B,SAAP;AACH;;AAEL;AAAS,aAAOV,KAAP;AATb;;AAWA,SAAOA,KAAP;AACH,C,CACD;;;AACA,MAAMW,WAAW,GAAGd,eAAe,CAAC;AAACE,EAAAA,KAAD;AAAQS,EAAAA;AAAR,CAAD,CAAnC,C,CACA;;AACA,eAAeG,WAAf","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nimport _posts from '../data/data';\r\n\r\n// here the postReducer is for managing the state of posts,now we have to manage the reducer for commentsit will be done below\r\nfunction posts(state = _posts, action) {\r\n    console.log(action.type);\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE_POST': return [...state.slice(0, action.index), ...state.slice(action.index + 1)]\r\n        \r\n        case 'ADD_POST': return [...state, action.post]\r\n\r\n        case 'LOAD_POSTS': return action.posts\r\n\r\n        default: return state;\r\n    }\r\n}\r\n// reducer for comments\r\nfunction comments(state = {}, action) {\r\n    switch (action.type) {\r\n        case 'ADD_COMMENT':\r\n            // this if works if comments state is undefined that means if no comment is been typed it will be placed\r\n            if(!state[action.postId]) {\r\n                return { ...state, [action.postId]:[action.comment] }\r\n            } else {\r\n                return { ...state, [action.postId]: [...state[action.postId], action.comment]}\r\n            }   \r\n        \r\n        default: return state;\r\n    }\r\n    return state;\r\n}\r\n// when we have more than one reducer in RootReducer, we should combine those reducers and assign it to the  rootReducer and place it in store\r\nconst rootReducer = combineReducers({posts, comments})\r\n// here ...state is a spread operator which means every single element in a state\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}