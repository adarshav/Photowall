{"ast":null,"code":"import { database } from '../firebase/config'; //this is a function to call the action and update the database\n\nexport function startAddingPost(post) {\n  // here dispatch is a method, [.then] is a promise\n  return dispatch => {\n    return database.ref('posts').update({\n      [post.id]: post\n    }).then(() => {\n      dispatch(addPost(post));\n    });\n  };\n} // this is function for fetching the data in the database\n\nexport function startLoadingPost() {\n  return dispatch => {\n    // here snapshot is id's of posts object\n    return database.ref('posts').once('value').then(snapshot => {\n      let posts = [];\n      snapshot.forEach(childSnapshot => {\n        posts.push(childSnapshot.val());\n      });\n      dispatch(loadPosts(posts));\n    });\n  };\n} // Action for loading posts\n\nexport function loadPosts(posts) {\n  return {\n    type: 'LOAD_POSTS',\n    posts: posts\n  };\n} // function for removing posts in the database\n\nexport function startRemovingPost(index, id) {\n  return dispatch => {\n    return database.ref(`posts/${id}`).remove().then(() => {\n      dispatch(removePost(index));\n    });\n  };\n} // Actions are just javascript objects which takes key as type and payload\n//remove posts\n\nexport function removePost(index) {\n  return {\n    type: 'REMOVE_POST',\n    index: index\n  };\n}\nexport function addPost(post) {\n  return {\n    type: 'ADD_POST',\n    post: post\n  };\n} // function for adding comments to database\n\nexport function startAddingComment(comment, postId) {\n  return dispatch => {\n    return database.ref('comment/' + postId).push(comment).then(() => {\n      dispatch(addComment(comment, postId));\n    });\n  };\n}\nexport function addComment(comment, postId) {\n  return {\n    type: 'ADD_COMMENT',\n    comment: comment,\n    postId: postId\n  };\n} // function for loading comments in database \n\nexport function startLoadingComments() {\n  return dispatch => {\n    return database.ref('comments').once.then(snapshot => {\n      let comments = {};\n      snapshot.forEach(childSnapshot => {\n        comments[childSnapshot.key] = Object.values([childSnapshot.val()]);\n      });\n    });\n  };\n} //action for loadingComments\n\nexport function loadComments(comments) {\n  return {\n    type: 'LOAD_COMMENTS',\n    comments: comments\n  };\n}","map":{"version":3,"sources":["E:/code/Project/PhotoWall/my-app/src/redux/actions.js"],"names":["database","startAddingPost","post","dispatch","ref","update","id","then","addPost","startLoadingPost","once","snapshot","posts","forEach","childSnapshot","push","val","loadPosts","type","startRemovingPost","index","remove","removePost","startAddingComment","comment","postId","addComment","startLoadingComments","comments","key","Object","values","loadComments"],"mappings":"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","sourcesContent":["import { database } from '../firebase/config';\r\n\r\n//this is a function to call the action and update the database\r\nexport function startAddingPost(post) {\r\n    // here dispatch is a method, [.then] is a promise\r\n    return(dispatch) => {\r\n        return database.ref('posts').update({[post.id]: post}).then(() => {\r\n            dispatch(addPost(post));\r\n        })\r\n    }\r\n}\r\n// this is function for fetching the data in the database\r\nexport function startLoadingPost() {\r\n    return(dispatch) => {\r\n        // here snapshot is id's of posts object\r\n        return database.ref('posts').once('value').then((snapshot) => {\r\n            let posts = [];\r\n            snapshot.forEach((childSnapshot) => {\r\n                posts.push(childSnapshot.val());\r\n            })\r\n            dispatch(loadPosts(posts));\r\n        })\r\n    }\r\n}\r\n\r\n// Action for loading posts\r\nexport function loadPosts(posts) {\r\n    return {\r\n        type: 'LOAD_POSTS',\r\n        posts:posts\r\n    }\r\n}\r\n\r\n// function for removing posts in the database\r\nexport function startRemovingPost(index, id) {\r\n    return(dispatch) => {\r\n        return database.ref(`posts/${ id }`).remove().then(() => {\r\n            dispatch(removePost(index))\r\n        })\r\n    }\r\n}\r\n// Actions are just javascript objects which takes key as type and payload\r\n//remove posts\r\nexport function removePost(index) {\r\n    return {\r\n        type: 'REMOVE_POST',\r\n        index:index\r\n    }\r\n}\r\nexport function addPost(post) {\r\n    return {\r\n        type: 'ADD_POST',\r\n        post:post\r\n    }\r\n}\r\n// function for adding comments to database\r\nexport function startAddingComment(comment, postId) {\r\n    return(dispatch) => {\r\n        return database.ref('comment/' + postId).push(comment).then(() => {\r\n            dispatch(addComment(comment, postId));\r\n        })\r\n    }\r\n}\r\n\r\nexport function addComment(comment, postId) {\r\n    return {\r\n        type: 'ADD_COMMENT',\r\n        comment:comment, \r\n        postId: postId\r\n    }\r\n}\r\n// function for loading comments in database \r\nexport function startLoadingComments() {\r\n    return(dispatch) => {\r\n        return database.ref('comments').once.then((snapshot) => {\r\n            let comments = {};\r\n            snapshot.forEach((childSnapshot) => {\r\n                comments[childSnapshot.key] = Object.values([childSnapshot.val()])    \r\n            })\r\n        })\r\n    }\r\n}\r\n//action for loadingComments\r\nexport function loadComments(comments) {\r\n    return {\r\n        type: 'LOAD_COMMENTS',\r\n        comments:comments\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}