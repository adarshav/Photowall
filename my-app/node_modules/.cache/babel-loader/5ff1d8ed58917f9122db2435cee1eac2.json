{"ast":null,"code":"// import { database } from '../firebase/config';\n// //this is a function to call the action and update the database\n// export function startAddingPost(post) {\n//     // here dispatch is a method, [.then] is a promise\n//     return(dispatch) => {\n//         return database.ref('posts').update({[post.id]: post}).then(() => {\n//             dispatch(addPost(post));\n//         }).catch((error) => {\n//             console.log(error);\n//         })\n//     }\n// }\n// // this is function for fetching the data in the database\n// export function startLoadingPost() {\n//     return(dispatch) => {\n//         // here snapshot is id's of posts object\n//         return database.ref('posts').once('value').then((snapshot) => {\n//             let posts = [];\n//             snapshot.forEach((childSnapshot) => {\n//                 posts.push(childSnapshot.val());\n//             })\n//             dispatch(loadPosts(posts));\n//         })\n//     }\n// }\n// // Action for loading posts\n// export function loadPosts(posts) {\n//     return {\n//         type: 'LOAD_POSTS',\n//         posts:posts\n//     }\n// }\n// // function for removing posts in the database\n// export function startRemovingPost(index, id) {\n//     return(dispatch) => {\n//         return database.ref(`posts/${ id }`).remove().then(() => {\n//             dispatch(removePost(index))\n//         }).catch((error) => {\n//             console.log(error);\n//         })\n//     }\n// }\n// // Actions are just javascript objects which takes key as type and payload\n// //remove posts\n// export function removePost(index) {\n//     return {\n//         type: 'REMOVE_POST',\n//         index:index\n//     }\n// }\n// export function addPost(post) {\n//     return {\n//         type: 'ADD_POST',\n//         post:post\n//     }\n// }\n// // function for adding comments to database\n// export function startAddingComment(comment, postId) {\n//     return(dispatch) => {\n//         return database.ref('comment/'+postId).push(comment).then(() => {\n//             dispatch(addComment(comment, postId));\n//         }).catch((error) => {\n//             console.log(error);\n//         })\n//     }\n// }\n// export function addComment(comment, postId) {\n//     return {\n//         type: 'ADD_COMMENT',\n//         comment:comment, \n//         postId: postId\n//     }\n// }\n// // function for loading comments in database \n// export function startLoadingComments() {\n//     return(dispatch) => {\n//         return database.ref('comments').once('value').then((snapshot) => {\n//             let comments = {};\n//             snapshot.forEach((childSnapshot) => {\n//                 comments[childSnapshot.key] = Object.values(childSnapshot.val())    \n//             })\n//             dispatch(loadComments(comments));\n//         }).catch((error) => {\n//             console.log(error);\n//         })\n//     }\n// }\n// //action for loadingComments\n// export function loadComments(comments) {\n//     return {\n//         type: 'LOAD_COMMENTS',\n//         comments:comments\n//     }\n// }\nimport { database } from '../database/config';\nexport function startAddingPost(post) {\n  return dispatch => {\n    return database.ref('posts').update({\n      [post.id]: post\n    }).then(() => {\n      dispatch(addPost(post));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startLoadingPost() {\n  return dispatch => {\n    return database.ref('posts').once('value').then(snapshot => {\n      let posts = [];\n      snapshot.forEach(childSnapshot => {\n        posts.push(childSnapshot.val());\n      });\n      dispatch(loadPosts(posts));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startRemovingPost(index, id) {\n  return dispatch => {\n    return database.ref(`posts/${id}`).remove().then(() => {\n      dispatch(removePost(index));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startAddingComment(comment, postId) {\n  return dispatch => {\n    return database.ref('comments/' + postId).push(comment).then(() => {\n      dispatch(addComment(comment, postId));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function startLoadingComments() {\n  return dispatch => {\n    return database.ref('comments').once('value').then(snapshot => {\n      let comments = {};\n      snapshot.forEach(childSnapshot => {\n        comments[childSnapshot.key] = Object.values(childSnapshot.val());\n      });\n      dispatch(loadComments(comments));\n    });\n  };\n}\nexport function loadComments(comments) {\n  return {\n    type: 'LOAD_COMMENTS',\n    comments\n  };\n}\nexport function removePost(index) {\n  return {\n    type: 'REMOVE_POST',\n    index\n  };\n}\nexport function addPost(post) {\n  return {\n    type: 'ADD_POST',\n    post\n  };\n}\nexport function addComment(comment, postId) {\n  return {\n    type: 'ADD_COMMENT',\n    comment,\n    postId\n  };\n}\nexport function loadPosts(posts) {\n  return {\n    type: 'LOAD_POSTS',\n    posts\n  };\n}","map":{"version":3,"sources":["E:/code/Project/PhotoWall/my-app/src/redux/actions.js"],"names":["database","startAddingPost","post","dispatch","ref","update","id","then","addPost","catch","error","console","log","startLoadingPost","once","snapshot","posts","forEach","childSnapshot","push","val","loadPosts","startRemovingPost","index","remove","removePost","startAddingComment","comment","postId","addComment","startLoadingComments","comments","key","Object","values","loadComments","type"],"mappings":"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","sourcesContent":["// import { database } from '../firebase/config';\r\n\r\n// //this is a function to call the action and update the database\r\n// export function startAddingPost(post) {\r\n//     // here dispatch is a method, [.then] is a promise\r\n//     return(dispatch) => {\r\n//         return database.ref('posts').update({[post.id]: post}).then(() => {\r\n//             dispatch(addPost(post));\r\n//         }).catch((error) => {\r\n//             console.log(error);\r\n//         })\r\n//     }\r\n// }\r\n// // this is function for fetching the data in the database\r\n// export function startLoadingPost() {\r\n//     return(dispatch) => {\r\n//         // here snapshot is id's of posts object\r\n//         return database.ref('posts').once('value').then((snapshot) => {\r\n//             let posts = [];\r\n//             snapshot.forEach((childSnapshot) => {\r\n//                 posts.push(childSnapshot.val());\r\n//             })\r\n//             dispatch(loadPosts(posts));\r\n//         })\r\n            \r\n//     }\r\n// }\r\n\r\n// // Action for loading posts\r\n// export function loadPosts(posts) {\r\n//     return {\r\n//         type: 'LOAD_POSTS',\r\n//         posts:posts\r\n//     }\r\n// }\r\n\r\n// // function for removing posts in the database\r\n// export function startRemovingPost(index, id) {\r\n//     return(dispatch) => {\r\n//         return database.ref(`posts/${ id }`).remove().then(() => {\r\n//             dispatch(removePost(index))\r\n//         }).catch((error) => {\r\n//             console.log(error);\r\n//         })\r\n//     }\r\n// }\r\n// // Actions are just javascript objects which takes key as type and payload\r\n// //remove posts\r\n// export function removePost(index) {\r\n//     return {\r\n//         type: 'REMOVE_POST',\r\n//         index:index\r\n//     }\r\n// }\r\n// export function addPost(post) {\r\n//     return {\r\n//         type: 'ADD_POST',\r\n//         post:post\r\n//     }\r\n// }\r\n// // function for adding comments to database\r\n// export function startAddingComment(comment, postId) {\r\n//     return(dispatch) => {\r\n//         return database.ref('comment/'+postId).push(comment).then(() => {\r\n//             dispatch(addComment(comment, postId));\r\n//         }).catch((error) => {\r\n//             console.log(error);\r\n//         })\r\n//     }\r\n// }\r\n\r\n// export function addComment(comment, postId) {\r\n//     return {\r\n//         type: 'ADD_COMMENT',\r\n//         comment:comment, \r\n//         postId: postId\r\n//     }\r\n// }\r\n// // function for loading comments in database \r\n// export function startLoadingComments() {\r\n//     return(dispatch) => {\r\n//         return database.ref('comments').once('value').then((snapshot) => {\r\n//             let comments = {};\r\n//             snapshot.forEach((childSnapshot) => {\r\n//                 comments[childSnapshot.key] = Object.values(childSnapshot.val())    \r\n//             })\r\n//             dispatch(loadComments(comments));\r\n//         }).catch((error) => {\r\n//             console.log(error);\r\n//         })\r\n//     }\r\n// }\r\n// //action for loadingComments\r\n// export function loadComments(comments) {\r\n//     return {\r\n//         type: 'LOAD_COMMENTS',\r\n//         comments:comments\r\n//     }\r\n// }\r\n\r\n\r\nimport {database} from '../database/config'\r\nexport function startAddingPost(post) {\r\n return (dispatch) => {\r\n return database.ref('posts').update({[post.id]: post}).then(() => {\r\n dispatch(addPost(post))\r\n }).catch((error) => {\r\n console.log(error)\r\n })\r\n }\r\n} \r\nexport function startLoadingPost() {\r\n return (dispatch) => {\r\n return database.ref('posts').once('value').then((snapshot) => {\r\n let posts = []\r\n snapshot.forEach((childSnapshot) => {\r\n posts.push(childSnapshot.val())\r\n })\r\n dispatch(loadPosts(posts))\r\n }).catch((error) => {\r\n console.log(error)\r\n })\r\n }\r\n}\r\nexport function startRemovingPost(index, id) {\r\n return (dispatch) => {\r\n return database.ref(`posts/${id}`).remove().then(() => {\r\n dispatch(removePost(index))\r\n }).catch((error) => {\r\n console.log(error)\r\n })\r\n }\r\n}\r\nexport function startAddingComment(comment, postId) {\r\n return (dispatch) => {\r\n return database.ref('comments/'+postId).push(comment).then(() => {\r\n dispatch(addComment(comment, postId))\r\n }).catch((error) => {\r\n console.log(error)\r\n })\r\n }\r\n}\r\nexport function startLoadingComments() {\r\n return (dispatch) => {\r\n return database.ref('comments').once('value').then((snapshot) => {\r\n let comments = {}\r\n snapshot.forEach((childSnapshot) => {\r\n comments[childSnapshot.key] = Object.values(childSnapshot.val())\r\n })\r\n dispatch(loadComments(comments))\r\n })\r\n }\r\n}\r\nexport function loadComments(comments) {\r\n return {\r\n type: 'LOAD_COMMENTS',\r\n comments\r\n }\r\n}\r\nexport function removePost(index) {\r\n return {\r\n type: 'REMOVE_POST',\r\n index\r\n }\r\n}\r\nexport function addPost(post) {\r\n return {\r\n type: 'ADD_POST',\r\n post\r\n }\r\n}\r\nexport function addComment(comment, postId) {\r\n return {\r\n type: 'ADD_COMMENT',\r\n comment,\r\n postId\r\n }\r\n}\r\nexport function loadPosts(posts) {\r\n return {\r\n type: 'LOAD_POSTS',\r\n posts\r\n }\r\n}"]},"metadata":{},"sourceType":"module"}